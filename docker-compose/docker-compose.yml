version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

# 服务容器配置
services:
#  golang:                                # 自定义容器名称
#    build:
#      context: ./golang                  # 指定构建使用的 Dockerfile 文件
#    environment:                         # 设置环境变量
#      - TZ=${TZ}
#    privileged: true
#    volumes:                             # 设置挂载目录
#      - ${CODE_PATH_HOST}:/usr/src/code  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
#    ports:                               # 设置端口映射
#      - "8000:8000"
#      - "8001:8001"
#      - "8002:8002"
#      - "8003:8003"
#      - "9000:9000"
#      - "9001:9001"
#      - "9002:9002"
#      - "9003:9003"
#    stdin_open: true                     # 打开标准输入，可以接受外部输入
#    tty: true
#    networks:
#      - backend
#    restart: always                      # 指定容器退出后的重启策略为始终重启


  prometheus:
    image: bitnami/prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./deploy/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  grafana:
    image: grafana/grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
#      - "6831:6831/udp"
    networks:
      - backend
    restart: always

  dtm:
    image: yedf/dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    privileged: true
    volumes:
      - ./deploy/dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always

  mysql:
    image: mysql:8.2
    privileged: true
    ports:
      - "${MYSQL_PORT}:3306"
    expose:
      - 3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} # root管理员用户密码
      - MYSQL_USER=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
#      - MYSQL_DATABASE=mtest # 初始化启动时要创建的数据库的名称
      - TZ=Asia/Shanghai
      - LANG=C.UTF-8  # 避免自动初始化sql文件乱码
    volumes:
      # 把sql文件映射到/docker-entrypoint-initdb.d文件夹，会自动初始化
#      - ./deploy/conf/mysql/init:/docker-entrypoint-initdb.d/
#      - ./deploy/data/mysql/data:/var/lib/mysql
#      - ./deploy/data/mysql/log:/var/log/mysql
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci #设置utf8字符集
      - --explicit_defaults_for_timestamp=true
      - --lower_case_table_names=1
      - --max_allowed_packet=128M
      - --default-time-zone=+8:00  # 设置MySQL数据到时区，而不是容器到时区
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--protocol=tcp"]
      timeout: 20s
      interval: 1s
      retries: 20
    networks:
      - backend

  # TODO 修改volume/image版本/端口
  redis:
    image: redis:7.0
    volumes:
      - ./deploy/redis:/usr/local/etc/redis  # redis配置文件
      - ${DATA_PATH_HOST}/redis:/data
#      - ./deploy/data/redis/data:/redis/data  # redis数据
#      - ./deploy/data/redis/logs:/logs  # redis日志文件
    command:
      redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT}:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 3s
    networks:
      - backend
    environment:
      - TZ=${TZ}
    privileged: true


#  mongo:
#    #    image: mongo:4.4
#    #    command: ["--auth"]
#    #    restart: on-failure
#    #    environment:
#    #      MONGO_INITDB_ROOT_USERNAME: root
#    #      MONGO_INITDB_ROOT_PASSWORD: 123456
#    #    ports:
#    #      - 27017:27017
#    #    volumes:
#    #      - ./data:/data/db
#    image: mongo:latest
#    container_name: mongodb
#    restart: always
#    volumes:
#      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
#      - ~/docker/mongodb/db:/data/db
#    #      - ~/docker/mongodb/log:/var/log/mongodb
#    #      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
#    ports:
#      - 27017:27017
#    environment:
#      MONGO_INITDB_DATABASE: mg
#      MONGO_INITDB_ROOT_USERNAME: admin
#      MONGO_INITDB_ROOT_PASSWORD: admin
#  nginx:  # nginx的dc文件，缺少nginx.conf和站点的conf配置
#    image: nginx
#    ports:
#      - "80:80"
#    volumes:
#      - ./config/html:/usr/share/nginx/html
#      - ./config/nginx.conf:/etc/nginx/nginx.conf  # nginx配置文件
#      - ./config/conf.d:/etc/nginx/conf.d
#      - ./data/logs:/var/log/nginx  # nginx日志
#    restart: always


  etcd:                                  # 自定义容器名称
    image: bitnami/etcd:3
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:                               # 设置端口映射
      - "${ETCD_PORT}:2379"
      - "12380:2380"
    networks:
      - backend
    restart: always


  etcd-manage:
    image: evildecay/etcdkeeper
    environment:
      - TZ=${TZ}
    ports:
      - "${ETCD_MANAGE_PORT}:8080"                    # 设置容器8080端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                       # 依赖容器
      - etcd                                          # 在 etcd 服务容器启动后启动
    networks:
      - backend
    restart: always



#  zookeeper:
#    image: zookeeper
#    container_name: zookeeper
#    ports:
#      - 2181:2181
#    volumes:
#      - ./data/zk/data:/data # zk数据
#      - ./data/zk/logs:/datalog # zk日志
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#  kafka:
#    image: bitnami/kafka:2.8.1
#    user: root
#    expose:
#      - 9092 # ???
#    ports:
#      - 9092:9092
#    volumes:
#      - ./data/kafka/data:/bitnami/kafka # ???
#    environment:
#      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
#      ALLOW_PLAINTEXT_LISTENER: yes
#      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
#      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_CFG_LISTENERS: CLIENT://:9091,EXTERNAL://:9092
#      KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://kafka:9091,EXTERNAL://127.0.0.1:9092
#      KAFKA_INTER_BROKER_LISTENER_NAME: CLIENT
#      KAFKA_BROKER_ID: 1
#      KAFKA_LISTENERS: PLAINTEXT://:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${DOCKER_HOST_IP:-127.0.0.1}:9092
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#    depends_on:
#      - zookeeper
#  kowl:
#    image: rsmnarts/kowl # kafka的web ui组件
#    environment:
#      KAFKA_BROKERS: ${DOCKER_HOST_IP:-127.0.0.1}:9092
#    ports:
#      - 29001:8080