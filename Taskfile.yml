  version: "3"

  vars:
    TARGET: ./cmd/betteralign
    GIT_LAST_TAG:
      sh: git describe --abbrev=0 --tags 2>/dev/null || echo latest
    GIT_HEAD_COMMIT:
      sh: git rev-parse --short HEAD 2>/dev/null || echo unknown
    GIT_TAG_COMMIT:
      sh: git rev-parse --short {{.GIT_LAST_TAG}} 2>/dev/null || echo unknown
    GIT_MODIFIED1:
      sh: git diff {{.GIT_HEAD_COMMIT}} {{.GIT_TAG_COMMIT}} --quiet 2>/dev/null || echo .dev
    GIT_MODIFIED2:
      sh: git diff --quiet 2>/dev/null || echo .dirty
    GIT_MODIFIED:
      sh: echo "{{.GIT_MODIFIED1}}{{.GIT_MODIFIED2}}"
    BUILD_DATE:
      sh: date -u '+%Y-%m-%dT%H:%M:%SZ'

    REGISTRY: docker.io
    IMAGE: skynewz/github-notifications-rss
    VCS_REF:
      sh: git rev-parse --short HEAD

  env:
    CGO_ENABLED: 0
    NEWPATH: "{{.GOPATH}}/bin:{{.PATH}}"

  tasks:
    default:
      cmds:
        - task: update
        - task: build

    update:
      cmds:
        - go get -u
        - go mod tidy

    check:
      cmds:
        - gomajor list

    fmt:
      cmds:
        - gci write .
        - gofumpt -l -w .

    generate:
      cmds:
        - PATH={{.NEWPATH}} rec -import=unicode/utf8 -pkg betteralign -matchstringutf8=reGeneratedBy '^//\s*Code generated by .* DO NOT EDIT\.$$' > match_generated.go

    test:
      cmds:
        - go test

    build:
      cmds:
        - task: update
        - task: generate
        - task: fmt
        - go build -trimpath -pgo=auto -ldflags="-s -w -extldflags '-static' -X main.GitTag={{.GIT_LAST_TAG}} -X main.GitCommit={{.GIT_HEAD_COMMIT}} -X main.GitDirty={{.GIT_MODIFIED}} -X main.BuildTime={{.BUILD_DATE}}" -o {{.TARGET}} ./cmd/betteralign

    build-debug:
      env:
        CGO_ENABLED: 1
      cmds:
        - task: update
        - task: generate
        - task: fmt
        - go build -ldflags="-X main.GitTag={{.GIT_LAST_TAG}} -X main.GitCommit={{.GIT_HEAD_COMMIT}} -X main.GitDirty={{.GIT_MODIFIED}} -X main.BuildTime={{.BUILD_DATE}}" -race -o {{.TARGET}} ./cmd/betteralign

    lint:
      cmds:
        - task: generate
        - task: fmt
        - golangci-lint run --timeout 5m

    benchstat:
      desc: 通过benchstat对比测试数据
      cmds:
        - go test -run=NONE -benchmem -bench=Rss -count=20 | tee -a xxx.txt
        - benchstat old.txt new.txt

    race:
      desc: Run data race detector
      cmds:
        - go test -race -short

    release:
      cmds:
        - goreleaser release --clean -p 4

    cross-build:
      desc: 交叉编译
      cmds:
#        - CGO_ENABLED=1 GOOS=linux GOARCH=amd64 @go build -a -o ./build/$(BINARY) -v ./

    test-cover:
      cmds:
        - go test `go list ./... | grep -v examples` -coverprofile=coverage.out -covermode=atomic
        - go tool cover -html=coverage.out


    api-gen:
      cmds:
        - goctl api go -api *.api -dir . --style=goZero

    rpc-gen:
      cmds:
        - goctl rpc protoc *.proto --go_out=../ --go-rpc_out=../ -zrpc_out=../ --style=goZero

    mysql-gen:
      cmds:
        - goctl model mysql datasource -url="$USERNAME:$PASSWD@tcp($HOST:$PORT)/$DBNAME" -table={{.CLI_ARGS}}  -dir="$MODELDIR" -cache=true --style=goZero
      env:
        MODELDIR: ./genModel
        HOST: 127.0.0.1
        PORT: 3306
        DBNAME: TEST
        USERNAME: root
        PASSWD:

    build-image:
      internal: true
      cmds:
        - |
          {{.CONTAINER_ENGINE}} build -t "{{.REGISTRY}}/{{.IMAGE}}:{{.VCS_REF}}" --build-arg BUILD_DATE={{.BUILD_DATE}} --build-arg VCS_REF={{.VCS_REF}} .
      preconditions:
        - sh: "command -v {{.CONTAINER_ENGINE}}"
          msg: "command not found: {{.CONTAINER_ENGINE}}"

    push-image:
      internal: true
      cmds:
        - |
          {{.CONTAINER_ENGINE}} push "{{.REGISTRY}}/{{.IMAGE}}:{{.VCS_REF}}"
          {{.CONTAINER_ENGINE}} tag "{{.REGISTRY}}/{{.IMAGE}}:{{.VCS_REF}}" "{{.REGISTRY}}/{{.IMAGE}}:latest"
          {{.CONTAINER_ENGINE}} push "{{.REGISTRY}}/{{.IMAGE}}:latest"
      preconditions:
        - sh: "command -v {{.CONTAINER_ENGINE}}"
          msg: "command not found: {{.CONTAINER_ENGINE}}"

    podman-build:
      desc: Build image using Podman
      cmds:
        - task: build-image
          vars:
            CONTAINER_ENGINE: podman

    podman-push:
      desc: Push image using Podman
      cmds:
        - task: push-image
          vars:
            CONTAINER_ENGINE: podman

    podman-build-push:
      desc: Build and push image using Podman
      cmds:
        - task: podman-build
        - task: podman-push

    docker-build-push:
      desc: Build and push image using Docker
      cmds:
        - task: docker-build
        - task: docker-push

    docker-build:
      desc: Build image using Docker
      cmds:
        - task: build-image
          vars:
            CONTAINER_ENGINE: docker

    docker-push:
      desc: Push image using Docker
      cmds:
        - task: push-image
          vars:
            CONTAINER_ENGINE: docker